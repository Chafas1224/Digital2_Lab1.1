
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000404  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  0000049c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c50  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a4  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000631  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049c  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000541  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002a49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_4>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	6c 00       	.word	0x006c	; ????
  6a:	6f 00       	.word	0x006f	; ????
  6c:	72 00       	.word	0x0072	; ????
  6e:	75 00       	.word	0x0075	; ????
  70:	78 00       	.word	0x0078	; ????
  72:	7b 00       	.word	0x007b	; ????
  74:	7e 00       	.word	0x007e	; ????
  76:	81 00       	.word	0x0081	; ????
  78:	84 00       	.word	0x0084	; ????
  7a:	87 00       	.word	0x0087	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 e0       	ldi	r30, 0x04	; 4
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a4 e0       	ldi	r26, 0x04	; 4
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ac 30       	cpi	r26, 0x0C	; 12
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 81 01 	call	0x302	; 0x302 <main>
  b2:	0c 94 00 02 	jmp	0x400	; 0x400 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <initDisplay>:
#include <avr/io.h>
#include <stdint.h>

void initDisplay(void){
	// Puerto D como salida
	DDRD = 0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  be:	1b b8       	out	0x0b, r1	; 11
	// Utilizar Rx y Tx
	UCSR0B = 0;
  c0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  c4:	08 95       	ret

000000c6 <numeros>:
}

void numeros(uint8_t Numero){
	switch (Numero) {
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	8a 30       	cpi	r24, 0x0A	; 10
  ca:	91 05       	cpc	r25, r1
  cc:	18 f5       	brcc	.+70     	; 0x114 <numeros+0x4e>
  ce:	fc 01       	movw	r30, r24
  d0:	ec 5c       	subi	r30, 0xCC	; 204
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__tablejump2__>
		case 0:
		PORTD = 0x3F;  // 0b00111111 -> a, b, c, d, e, f encendidos.
  d8:	8f e3       	ldi	r24, 0x3F	; 63
  da:	8b b9       	out	0x0b, r24	; 11
		break;
  dc:	08 95       	ret
		case 1:
		PORTD = 0x06;  // 0b00000110 -> b, c encendidos.
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	8b b9       	out	0x0b, r24	; 11
		break;
  e2:	08 95       	ret
		case 2:
		PORTD = 0x5B;  // 0b01011011 -> a, b, d, e, g encendidos.
  e4:	8b e5       	ldi	r24, 0x5B	; 91
  e6:	8b b9       	out	0x0b, r24	; 11
		break;
  e8:	08 95       	ret
		case 3:
		PORTD = 0x4F;  // 0b01001111 -> a, b, c, d, g encendidos.
  ea:	8f e4       	ldi	r24, 0x4F	; 79
  ec:	8b b9       	out	0x0b, r24	; 11
		break;
  ee:	08 95       	ret
		case 4:
		PORTD = 0x66;  // 0b01100110 -> b, c, f, g encendidos.
  f0:	86 e6       	ldi	r24, 0x66	; 102
  f2:	8b b9       	out	0x0b, r24	; 11
		break;
  f4:	08 95       	ret
		case 5:
		PORTD = 0x6D;  // 0b01101101 -> a, c, d, f, g encendidos.
  f6:	8d e6       	ldi	r24, 0x6D	; 109
  f8:	8b b9       	out	0x0b, r24	; 11
		break;
  fa:	08 95       	ret
		case 6:
		PORTD = 0x7D;  // 0b01111101 -> a, c, d, e, f, g encendidos.
  fc:	8d e7       	ldi	r24, 0x7D	; 125
  fe:	8b b9       	out	0x0b, r24	; 11
		break;
 100:	08 95       	ret
		case 7:
		PORTD = 0x07;  // 0b00000111 -> a, b, c encendidos.
 102:	87 e0       	ldi	r24, 0x07	; 7
 104:	8b b9       	out	0x0b, r24	; 11
		break;
 106:	08 95       	ret
		case 8:
		PORTD = 0x7F;  // 0b01111111 -> Todos los segmentos encendidos.
 108:	8f e7       	ldi	r24, 0x7F	; 127
 10a:	8b b9       	out	0x0b, r24	; 11
		break;
 10c:	08 95       	ret
		case 9:
		PORTD = 0x6F;  // 0b01101111 -> a, b, c, d, f, g encendidos.
 10e:	8f e6       	ldi	r24, 0x6F	; 111
 110:	8b b9       	out	0x0b, r24	; 11
		break;
 112:	08 95       	ret
		default:
		PORTD = 0x00;  // Apagar todos los segmentos.
 114:	1b b8       	out	0x0b, r1	; 11
 116:	08 95       	ret

00000118 <setup>:
    }
}

/*-----------------------------Setup-------------------------------------------------------------*/
void setup(void) {
	cli();
 118:	f8 94       	cli
	si_contar = 0;
 11a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <si_contar>
	iniciar = 0;
 11e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <iniciar>
	DDRC &= ~((1<<PC0) | (1<<PC1) | (1<<PC2));
 122:	87 b1       	in	r24, 0x07	; 7
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	87 b9       	out	0x07, r24	; 7
	DDRC |= ((1<<PC3) | (1<<PC4) | (1<<PC5) | (1<<PC6));  
 128:	87 b1       	in	r24, 0x07	; 7
 12a:	88 67       	ori	r24, 0x78	; 120
 12c:	87 b9       	out	0x07, r24	; 7
	DDRB |= ((1<<PB0) | (1<<PB1) | (1<<PB2) | (1<<PB3));  
 12e:	84 b1       	in	r24, 0x04	; 4
 130:	8f 60       	ori	r24, 0x0F	; 15
 132:	84 b9       	out	0x04, r24	; 4
	PORTC |= ((1<<PC0) | (1<<PC1) | (1<<PC2));
 134:	88 b1       	in	r24, 0x08	; 8
 136:	87 60       	ori	r24, 0x07	; 7
 138:	88 b9       	out	0x08, r24	; 8
	initDisplay();  
 13a:	0e 94 5d 00 	call	0xba	; 0xba <initDisplay>
	
	// Habilitando interrupciones
	PCICR |= (1 << PCIE1);
 13e:	e8 e6       	ldi	r30, 0x68	; 104
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	82 60       	ori	r24, 0x02	; 2
 146:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10); 
 148:	ec e6       	ldi	r30, 0x6C	; 108
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	87 60       	ori	r24, 0x07	; 7
 150:	80 83       	st	Z, r24
	sei();
 152:	78 94       	sei
 154:	08 95       	ret

00000156 <__vector_4>:
}

/*-----------------------------Interrupciones-----------------------------------------------------*/
ISR(PCINT1_vect) {
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	
	uint8_t state = PINC;
 168:	86 b1       	in	r24, 0x06	; 6


	if ((prev_PC1 == 1) && ((state & (1 << PC1)) == 0)) {
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <prev_PC1>
 16e:	91 30       	cpi	r25, 0x01	; 1
 170:	c1 f4       	brne	.+48     	; 0x1a2 <__vector_4+0x4c>
 172:	81 fd       	sbrc	r24, 1
 174:	16 c0       	rjmp	.+44     	; 0x1a2 <__vector_4+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	ef e1       	ldi	r30, 0x1F	; 31
 178:	fe e4       	ldi	r31, 0x4E	; 78
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <__vector_4+0x24>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <__vector_4+0x2a>
 180:	00 00       	nop
		_delay_ms(5);
		if ((PINC & (1 << PC1)) == 0) {
 182:	31 99       	sbic	0x06, 1	; 6
 184:	0e c0       	rjmp	.+28     	; 0x1a2 <__vector_4+0x4c>
			iniciar = 1;
 186:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <iniciar>
			contador1 = contador2 = jugador1 = jugador2 = fin1 = fin2 = 0;
 18a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 18e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <fin1>
 192:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <jugador2>
 196:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <jugador1>
 19a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <contador2>
 19e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <contador1>
		}
	}

	//Boton PC2
	if ((prev_PC2 == 1) && ((state & (1 << PC2)) == 0) && (si_contar == 1)) {
 1a2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a6:	91 30       	cpi	r25, 0x01	; 1
 1a8:	99 f4       	brne	.+38     	; 0x1d0 <__vector_4+0x7a>
 1aa:	82 fd       	sbrc	r24, 2
 1ac:	11 c0       	rjmp	.+34     	; 0x1d0 <__vector_4+0x7a>
 1ae:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <si_contar>
 1b2:	91 30       	cpi	r25, 0x01	; 1
 1b4:	69 f4       	brne	.+26     	; 0x1d0 <__vector_4+0x7a>
 1b6:	ef e1       	ldi	r30, 0x1F	; 31
 1b8:	fe e4       	ldi	r31, 0x4E	; 78
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <__vector_4+0x64>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <__vector_4+0x6a>
 1c0:	00 00       	nop
		_delay_ms(5);
		if ((PINC & (1 << PC2)) == 0) {
 1c2:	32 99       	sbic	0x06, 2	; 6
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <__vector_4+0x7a>
			contador2++;
 1c6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <contador2>
 1ca:	9f 5f       	subi	r25, 0xFF	; 255
 1cc:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <contador2>
		}
	}
	
	
	// Boton PC0
	if ((prev_PC0 == 1) && ((state & (1 << PC0)) == 0) && (si_contar == 1)) {
 1d0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <prev_PC0>
 1d4:	91 30       	cpi	r25, 0x01	; 1
 1d6:	99 f4       	brne	.+38     	; 0x1fe <__vector_4+0xa8>
 1d8:	80 fd       	sbrc	r24, 0
 1da:	11 c0       	rjmp	.+34     	; 0x1fe <__vector_4+0xa8>
 1dc:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <si_contar>
 1e0:	91 30       	cpi	r25, 0x01	; 1
 1e2:	69 f4       	brne	.+26     	; 0x1fe <__vector_4+0xa8>
 1e4:	ef e1       	ldi	r30, 0x1F	; 31
 1e6:	fe e4       	ldi	r31, 0x4E	; 78
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <__vector_4+0x92>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <__vector_4+0x98>
 1ee:	00 00       	nop
		_delay_ms(5);
		if ((PINC & (1 << PC0)) == 0) {
 1f0:	30 99       	sbic	0x06, 0	; 6
 1f2:	05 c0       	rjmp	.+10     	; 0x1fe <__vector_4+0xa8>
			contador1++;
 1f4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <contador1>
 1f8:	9f 5f       	subi	r25, 0xFF	; 255
 1fa:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <contador1>
	}



	// Actualizamos los estados previos
	prev_PC0 = ((state & (1 << PC0)) != 0) ? 1 : 0;
 1fe:	98 2f       	mov	r25, r24
 200:	91 70       	andi	r25, 0x01	; 1
 202:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <prev_PC0>
	prev_PC1 = ((state & (1 << PC1)) != 0) ? 1 : 0;
 206:	81 fb       	bst	r24, 1
 208:	99 27       	eor	r25, r25
 20a:	90 f9       	bld	r25, 0
 20c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <prev_PC1>
	prev_PC2 = ((state & (1 << PC2)) != 0) ? 1 : 0;
 210:	82 fb       	bst	r24, 2
 212:	88 27       	eor	r24, r24
 214:	80 f9       	bld	r24, 0
 216:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <multiplexar>:
 22c:	8f e1       	ldi	r24, 0x1F	; 31
 22e:	9e e4       	ldi	r25, 0x4E	; 78
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <multiplexar+0x4>
 234:	00 c0       	rjmp	.+0      	; 0x236 <multiplexar+0xa>
 236:	00 00       	nop


/*-----------------------------Funciones secundarias-----------------------------------------------------*/
void multiplexar(void){
	_delay_ms(5);
	PORTB = jugador2;
 238:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <jugador2>
 23c:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1<<PC4);
 23e:	88 b1       	in	r24, 0x08	; 8
 240:	80 61       	ori	r24, 0x10	; 16
 242:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1<<PC3);
 244:	88 b1       	in	r24, 0x08	; 8
 246:	87 7f       	andi	r24, 0xF7	; 247
 248:	88 b9       	out	0x08, r24	; 8
 24a:	8f e1       	ldi	r24, 0x1F	; 31
 24c:	9e e4       	ldi	r25, 0x4E	; 78
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <multiplexar+0x22>
 252:	00 c0       	rjmp	.+0      	; 0x254 <multiplexar+0x28>
 254:	00 00       	nop
	_delay_ms(5);
	PORTB = jugador1;
 256:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <jugador1>
 25a:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1<<PC3);
 25c:	88 b1       	in	r24, 0x08	; 8
 25e:	88 60       	ori	r24, 0x08	; 8
 260:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1<<PC4);
 262:	88 b1       	in	r24, 0x08	; 8
 264:	8f 7e       	andi	r24, 0xEF	; 239
 266:	88 b9       	out	0x08, r24	; 8
 268:	08 95       	ret

0000026a <Salida1_app>:
	
	
}

void Salida1_app(uint8_t contador1){
	switch(contador1){
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	91 f0       	breq	.+36     	; 0x292 <Salida1_app+0x28>
 26e:	28 f4       	brcc	.+10     	; 0x27a <Salida1_app+0x10>
 270:	88 23       	and	r24, r24
 272:	41 f0       	breq	.+16     	; 0x284 <Salida1_app+0x1a>
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	49 f0       	breq	.+18     	; 0x28a <Salida1_app+0x20>
 278:	1b c0       	rjmp	.+54     	; 0x2b0 <Salida1_app+0x46>
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	71 f0       	breq	.+28     	; 0x29a <Salida1_app+0x30>
 27e:	84 30       	cpi	r24, 0x04	; 4
 280:	81 f0       	breq	.+32     	; 0x2a2 <Salida1_app+0x38>
 282:	16 c0       	rjmp	.+44     	; 0x2b0 <Salida1_app+0x46>
		case 0:
		jugador1 = 0x00;
 284:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <jugador1>
		break;
 288:	08 95       	ret
		case 1:
		jugador1 = 0x01;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <jugador1>
		break;
 290:	08 95       	ret
		case 2:
		jugador1 = 0x02;
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <jugador1>
		break;
 298:	08 95       	ret
		case 3:
		jugador1 = 0x04;
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <jugador1>
		break;
 2a0:	08 95       	ret
		case 4:
		jugador1 = 0x0F;
 2a2:	8f e0       	ldi	r24, 0x0F	; 15
 2a4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <jugador1>
		fin1 = 1;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <fin1>
		break;
 2ae:	08 95       	ret
		default:
		jugador1 = 0x00;
 2b0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <jugador1>
 2b4:	08 95       	ret

000002b6 <Salida2_app>:
	}
}

void Salida2_app(uint8_t contador2){
	switch(contador2){
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	91 f0       	breq	.+36     	; 0x2de <Salida2_app+0x28>
 2ba:	28 f4       	brcc	.+10     	; 0x2c6 <Salida2_app+0x10>
 2bc:	88 23       	and	r24, r24
 2be:	41 f0       	breq	.+16     	; 0x2d0 <Salida2_app+0x1a>
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	49 f0       	breq	.+18     	; 0x2d6 <Salida2_app+0x20>
 2c4:	1b c0       	rjmp	.+54     	; 0x2fc <Salida2_app+0x46>
 2c6:	83 30       	cpi	r24, 0x03	; 3
 2c8:	71 f0       	breq	.+28     	; 0x2e6 <Salida2_app+0x30>
 2ca:	84 30       	cpi	r24, 0x04	; 4
 2cc:	81 f0       	breq	.+32     	; 0x2ee <Salida2_app+0x38>
 2ce:	16 c0       	rjmp	.+44     	; 0x2fc <Salida2_app+0x46>
		case 0:
		jugador2 = 0x00;
 2d0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <jugador2>
		break;
 2d4:	08 95       	ret
		case 1:
		jugador2 = 0x01;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <jugador2>
		break;
 2dc:	08 95       	ret
		case 2:
		jugador2 = 0x02;
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <jugador2>
		break;
 2e4:	08 95       	ret
		case 3:
		jugador2 = 0x04;
 2e6:	84 e0       	ldi	r24, 0x04	; 4
 2e8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <jugador2>
		break;
 2ec:	08 95       	ret
		case 4:
		jugador2 = 0x0F;
 2ee:	8f e0       	ldi	r24, 0x0F	; 15
 2f0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <jugador2>
		fin2 = 1;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		break;
 2fa:	08 95       	ret
		default:
		jugador2 = 0x00;
 2fc:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <jugador2>
 300:	08 95       	ret

00000302 <main>:


/*-----------------------------Main---------------------------------------------------------------*/
int main(void)
{
    setup();
 302:	0e 94 8c 00 	call	0x118	; 0x118 <setup>
	numeros(0);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 63 00 	call	0xc6	; 0xc6 <numeros>
	
    while (1) 
    {
		if (iniciar == 1)
 30c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <iniciar>
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	09 f0       	breq	.+2      	; 0x316 <main+0x14>
 314:	48 c0       	rjmp	.+144    	; 0x3a6 <main+0xa4>
		{
			iniciar = 0;
 316:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <iniciar>
			numeros(5);
 31a:	85 e0       	ldi	r24, 0x05	; 5
 31c:	0e 94 63 00 	call	0xc6	; 0xc6 <numeros>
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	83 ed       	ldi	r24, 0xD3	; 211
 324:	90 e3       	ldi	r25, 0x30	; 48
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <main+0x24>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x2e>
 330:	00 00       	nop
			_delay_ms(1000);
			numeros(4);
 332:	84 e0       	ldi	r24, 0x04	; 4
 334:	0e 94 63 00 	call	0xc6	; 0xc6 <numeros>
 338:	2f ef       	ldi	r18, 0xFF	; 255
 33a:	83 ed       	ldi	r24, 0xD3	; 211
 33c:	90 e3       	ldi	r25, 0x30	; 48
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <main+0x3c>
 346:	00 c0       	rjmp	.+0      	; 0x348 <main+0x46>
 348:	00 00       	nop
			_delay_ms(1000);
			numeros(3);
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	0e 94 63 00 	call	0xc6	; 0xc6 <numeros>
 350:	2f ef       	ldi	r18, 0xFF	; 255
 352:	83 ed       	ldi	r24, 0xD3	; 211
 354:	90 e3       	ldi	r25, 0x30	; 48
 356:	21 50       	subi	r18, 0x01	; 1
 358:	80 40       	sbci	r24, 0x00	; 0
 35a:	90 40       	sbci	r25, 0x00	; 0
 35c:	e1 f7       	brne	.-8      	; 0x356 <main+0x54>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <main+0x5e>
 360:	00 00       	nop
			_delay_ms(1000);
			numeros(2);
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	0e 94 63 00 	call	0xc6	; 0xc6 <numeros>
 368:	2f ef       	ldi	r18, 0xFF	; 255
 36a:	83 ed       	ldi	r24, 0xD3	; 211
 36c:	90 e3       	ldi	r25, 0x30	; 48
 36e:	21 50       	subi	r18, 0x01	; 1
 370:	80 40       	sbci	r24, 0x00	; 0
 372:	90 40       	sbci	r25, 0x00	; 0
 374:	e1 f7       	brne	.-8      	; 0x36e <main+0x6c>
 376:	00 c0       	rjmp	.+0      	; 0x378 <main+0x76>
 378:	00 00       	nop
			_delay_ms(1000);
			numeros(1);
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 63 00 	call	0xc6	; 0xc6 <numeros>
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	83 ed       	ldi	r24, 0xD3	; 211
 384:	90 e3       	ldi	r25, 0x30	; 48
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <main+0x84>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <main+0x8e>
 390:	00 00       	nop
			_delay_ms(1000);
			numeros(0);
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e 94 63 00 	call	0xc6	; 0xc6 <numeros>
			contador1 = 0;
 398:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <contador1>
			contador2 = 0;
 39c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <contador2>
			si_contar = 1;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <si_contar>
		}
		if (fin1 == 1){
 3a6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <fin1>
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	39 f4       	brne	.+14     	; 0x3bc <main+0xba>
			si_contar = 0;
 3ae:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <si_contar>
			contador2 = 0;
 3b2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <contador2>
			numeros(1);
 3b6:	0e 94 63 00 	call	0xc6	; 0xc6 <numeros>
 3ba:	0b c0       	rjmp	.+22     	; 0x3d2 <main+0xd0>
		}
		else if (fin2 == 1){
 3bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	39 f4       	brne	.+14     	; 0x3d2 <main+0xd0>
			si_contar = 0;
 3c4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <si_contar>
			contador1 = 0;
 3c8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <contador1>
			numeros(2);
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 63 00 	call	0xc6	; 0xc6 <numeros>
		}
		Salida2_app(contador2);
 3d2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <contador2>
 3d6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Salida2_app>
		Salida1_app(contador1);
 3da:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <contador1>
 3de:	0e 94 35 01 	call	0x26a	; 0x26a <Salida1_app>
		multiplexar();
 3e2:	0e 94 16 01 	call	0x22c	; 0x22c <multiplexar>
 3e6:	8f e1       	ldi	r24, 0x1F	; 31
 3e8:	9e e4       	ldi	r25, 0x4E	; 78
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <main+0xe8>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0xee>
 3f0:	00 00       	nop
 3f2:	8c cf       	rjmp	.-232    	; 0x30c <main+0xa>

000003f4 <__tablejump2__>:
 3f4:	ee 0f       	add	r30, r30
 3f6:	ff 1f       	adc	r31, r31
 3f8:	05 90       	lpm	r0, Z+
 3fa:	f4 91       	lpm	r31, Z
 3fc:	e0 2d       	mov	r30, r0
 3fe:	09 94       	ijmp

00000400 <_exit>:
 400:	f8 94       	cli

00000402 <__stop_program>:
 402:	ff cf       	rjmp	.-2      	; 0x402 <__stop_program>
